# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from compiler.grpc.proto import compiler_pb2 as compiler_dot_grpc_dot_proto_dot_compiler__pb2


class OddsCompilerServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetEventMarket = channel.unary_unary(
        '/proto.OddsCompilerService/GetEventMarket',
        request_serializer=compiler_dot_grpc_dot_proto_dot_compiler__pb2.EventRequest.SerializeToString,
        response_deserializer=compiler_dot_grpc_dot_proto_dot_compiler__pb2.EventMarket.FromString,
        )


class OddsCompilerServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetEventMarket(self, request, context):
    """Returns market for a given event
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OddsCompilerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetEventMarket': grpc.unary_unary_rpc_method_handler(
          servicer.GetEventMarket,
          request_deserializer=compiler_dot_grpc_dot_proto_dot_compiler__pb2.EventRequest.FromString,
          response_serializer=compiler_dot_grpc_dot_proto_dot_compiler__pb2.EventMarket.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'proto.OddsCompilerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
